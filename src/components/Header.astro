---
import { nav, headerCTAs } from '../data/site';
import Logo from './Logo.astro';
---

<a href="#main" class="skip-link">Skip to content</a>

<header class="sticky top-0 z-40 bg-white border-b-2 border-brand-red shadow-sm">
  <div class="container">
    <div class="flex items-center py-4">
      <!-- Logo (left) -->
      <div class="flex-shrink-0">
        <a href="/" class="flex items-center space-x-2 focus:outline-none focus:ring-2 focus:ring-brand-red focus:ring-offset-2 rounded-lg">
          <Logo size="sm" alt="IHARC - Return to homepage" />
        </a>
      </div>

      <!-- Desktop Navigation (center) -->
      <nav class="hidden lg:flex flex-1 justify-center items-center" role="navigation" aria-label="Main navigation">
        <div class="flex items-center space-x-8">
          {nav.map((item) => (
            <a
              href={item.href}
              class="text-gray-700 hover:text-brand-red font-medium transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-brand-red focus:ring-offset-2 rounded px-2 py-1"
              {...(item.external && { target: "_blank", rel: "noopener noreferrer" })}
            >
              {item.label}
              {item.external && (
                <span class="ml-1 text-xs" aria-label="(opens in new tab)">↗</span>
              )}
            </a>
          ))}
        </div>
      </nav>

      <!-- Desktop CTAs (right) -->
      <div class="hidden lg:flex items-center space-x-3 flex-shrink-0">
        {headerCTAs.map((cta) => (
          <a
            href={cta.href}
            class={`btn-${cta.variant}`}
            {...(cta.external && { target: "_blank", rel: "noopener noreferrer" })}
          >
            {cta.text}
          </a>
        ))}
      </div>

      <!-- Mobile Menu Button (right on mobile) -->
      <div class="lg:hidden flex-shrink-0 ml-auto">
        <button
          id="mobile-menu-button"
          class="flex flex-col items-center justify-center w-10 h-10 space-y-1 focus:outline-none focus:ring-2 focus:ring-brand-red focus:ring-offset-2 rounded"
          aria-label="Toggle mobile menu"
          aria-expanded="false"
          aria-controls="mobile-menu"
        >
          <span class="w-6 h-0.5 bg-brand-red transition-all duration-300 transform origin-center" aria-hidden="true"></span>
          <span class="w-6 h-0.5 bg-brand-red transition-all duration-300" aria-hidden="true"></span>
          <span class="w-6 h-0.5 bg-brand-red transition-all duration-300 transform origin-center" aria-hidden="true"></span>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div
    id="mobile-menu"
    class="lg:hidden hidden bg-white border-t border-gray-200"
    aria-label="Mobile navigation"
  >
    <div class="container py-6">
      <nav class="space-y-4" role="navigation">
        {nav.map((item) => (
          <a
            href={item.href}
            class="block text-gray-700 hover:text-brand-red font-medium py-2 transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-brand-red focus:ring-offset-2 rounded px-2"
            {...(item.external && { target: "_blank", rel: "noopener noreferrer" })}
          >
            {item.label}
            {item.external && (
              <span class="ml-1 text-xs" aria-label="(opens in new tab)">↗</span>
            )}
          </a>
        ))}
      </nav>
      
      <div class="flex flex-col space-y-3 mt-6 pt-6 border-t border-gray-200">
        {headerCTAs.map((cta) => (
          <a
            href={cta.href}
            class={`btn-${cta.variant} text-center`}
            {...(cta.external && { target: "_blank", rel: "noopener noreferrer" })}
          >
            {cta.text}
          </a>
        ))}
      </div>
    </div>
  </div>
</header>

<script>
  import { FocusTrap } from '../lib/a11y';

  class MobileMenu {
    private button: HTMLElement;
    private menu: HTMLElement;
    private isOpen = false;
    private focusTrap: FocusTrap | null = null;

    constructor() {
      this.button = document.getElementById('mobile-menu-button')!;
      this.menu = document.getElementById('mobile-menu')!;
      
      if (this.button && this.menu) {
        this.init();
      }
    }

    private init() {
      this.button.addEventListener('click', this.toggle.bind(this));
      this.focusTrap = new FocusTrap(this.menu, {
        escapeDeactivates: true,
        clickOutsideDeactivates: true,
        returnFocusOnDeactivate: true,
      });
      
      // Close on window resize to desktop size
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 1024 && this.isOpen) {
          this.close();
        }
      });

      // Listen for deactivation from focus trap
      document.addEventListener('focus-trap:deactivate', () => {
        if (this.isOpen) {
          this.close();
        }
      });
    }

    private toggle() {
      if (this.isOpen) {
        this.close();
      } else {
        this.open();
      }
    }

    private open() {
      this.isOpen = true;
      this.button.setAttribute('aria-expanded', 'true');
      this.menu.classList.remove('hidden');
      this.updateButtonAnimation();
      this.focusTrap?.activate();
    }

    private close() {
      this.isOpen = false;
      this.button.setAttribute('aria-expanded', 'false');
      this.menu.classList.add('hidden');
      this.updateButtonAnimation();
      this.focusTrap?.deactivate();
    }

    private updateButtonAnimation() {
      const spans = this.button.querySelectorAll('span');
      if (this.isOpen) {
        // Transform to X
        spans[0]?.classList.add('rotate-45', 'translate-y-1.5');
        spans[1]?.classList.add('opacity-0');
        spans[2]?.classList.add('-rotate-45', '-translate-y-1.5');
      } else {
        // Transform back to hamburger
        spans[0]?.classList.remove('rotate-45', 'translate-y-1.5');
        spans[1]?.classList.remove('opacity-0');
        spans[2]?.classList.remove('-rotate-45', '-translate-y-1.5');
      }
    }
  }

  // Initialize mobile menu when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new MobileMenu());
  } else {
    new MobileMenu();
  }
</script>