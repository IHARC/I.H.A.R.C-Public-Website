---
// Live chat widget component
// Supports multiple chat providers with easy configuration

export interface Props {
  // Skip chat widget when disabled
  disabled?: boolean;
  // Provider: intercom, zendesk, crisp, tawk, custom
  provider?: 'intercom' | 'zendesk' | 'crisp' | 'tawk' | 'custom';
  // Custom configuration
  config?: Record<string, any>;
}

const { 
  disabled = false,
  provider = 'crisp', // Default to Crisp as it's free and easy to use
  config = {}
} = Astro.props;

// Get chat configuration from environment variables
const INTERCOM_APP_ID = import.meta.env.PUBLIC_INTERCOM_APP_ID;
const ZENDESK_KEY = import.meta.env.PUBLIC_ZENDESK_KEY;
const CRISP_WEBSITE_ID = import.meta.env.PUBLIC_CRISP_WEBSITE_ID;
const TAWK_PROPERTY_ID = import.meta.env.PUBLIC_TAWK_PROPERTY_ID;
const TAWK_WIDGET_ID = import.meta.env.PUBLIC_TAWK_WIDGET_ID;

// Don't load chat in development unless explicitly enabled
const isDev = import.meta.env.DEV;
const shouldLoad = !disabled && !isDev;

// Check if required IDs are available for the selected provider
const hasRequiredConfig = () => {
  switch(provider) {
    case 'intercom': return !!INTERCOM_APP_ID;
    case 'zendesk': return !!ZENDESK_KEY;
    case 'crisp': return !!CRISP_WEBSITE_ID;
    case 'tawk': return !!(TAWK_PROPERTY_ID && TAWK_WIDGET_ID);
    case 'custom': return true;
    default: return false;
  }
};
---

{shouldLoad && hasRequiredConfig() && (
  <Fragment>
    <!-- Intercom Chat -->
    {provider === 'intercom' && INTERCOM_APP_ID && (
      <script is:inline define:vars={{ INTERCOM_APP_ID, config }}>
        window.intercomSettings = {
          api_base: "https://widget.intercom.io",
          app_id: INTERCOM_APP_ID,
          ...config
        };

        (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',w.intercomSettings);}else{var d=document;var i=function(){i.c(arguments);};i.q=[];i.c=function(args){i.q.push(args);};w.Intercom=i;var l=function(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/' + INTERCOM_APP_ID;var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);};if(document.readyState==='complete'){l();}else if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();

        console.log('Intercom chat initialized');
      </script>
    )}

    <!-- Zendesk Chat -->
    {provider === 'zendesk' && ZENDESK_KEY && (
      <script is:inline define:vars={{ ZENDESK_KEY }}>
        window.$zopim||(function(d,s){var z=$zopim=function(c){z._.push(c)},$=z.s=
        d.createElement(s),e=d.getElementsByTagName(s)[0];z.set=function(o){z.set.
        _.push(o)};z._=[];z.set._=[];$.async=!0;$.setAttribute("charset","utf-8");
        $.src="https://v2.zopim.com/?"+ZENDESK_KEY;z.t=+new Date;$.
        type="text/javascript";e.parentNode.insertBefore($,e)})(document,"script");

        console.log('Zendesk chat initialized');
      </script>
    )}

    <!-- Crisp Chat -->
    {provider === 'crisp' && CRISP_WEBSITE_ID && (
      <script is:inline define:vars={{ CRISP_WEBSITE_ID, config }}>
        window.$crisp=[];
        window.CRISP_WEBSITE_ID=CRISP_WEBSITE_ID;
        
        // Apply custom configuration
        if (config.user) {
          $crisp.push(["set", "user:email", config.user.email]);
          $crisp.push(["set", "user:nickname", config.user.name]);
        }
        
        if (config.session) {
          Object.keys(config.session).forEach(key => {
            $crisp.push(["set", "session:data", key, config.session[key]]);
          });
        }
        
        (function(){
          d=document;
          s=d.createElement("script");
          s.src="https://client.crisp.chat/l.js";
          s.async=1;
          d.getElementsByTagName("head")[0].appendChild(s);
        })();

        console.log('Crisp chat initialized');
      </script>
    )}

    <!-- Tawk.to Chat -->
    {provider === 'tawk' && TAWK_PROPERTY_ID && TAWK_WIDGET_ID && (
      <script is:inline define:vars={{ TAWK_PROPERTY_ID, TAWK_WIDGET_ID }}>
        var Tawk_API=Tawk_API||{}, Tawk_LoadStart=new Date();
        (function(){
          var s1=document.createElement("script"),s0=document.getElementsByTagName("script")[0];
          s1.async=true;
          s1.src='https://embed.tawk.to/' + TAWK_PROPERTY_ID + '/' + TAWK_WIDGET_ID;
          s1.charset='UTF-8';
          s1.setAttribute('crossorigin','*');
          s0.parentNode.insertBefore(s1,s0);
        })();

        console.log('Tawk.to chat initialized');
      </script>
    )}

    <!-- Custom Chat Widget -->
    {provider === 'custom' && (
      <div id="custom-chat-widget" class="fixed bottom-4 right-4 z-50">
        <!-- Custom chat implementation goes here -->
        <button 
          id="chat-toggle"
          class="bg-brand-red text-white rounded-full p-4 shadow-lg hover:bg-brand-redDark transition-colors focus:outline-none focus:ring-2 focus:ring-brand-red focus:ring-offset-2"
          aria-label="Open chat"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
        </button>
        
        <div 
          id="chat-window"
          class="hidden absolute bottom-16 right-0 w-80 h-96 bg-white border border-gray-300 rounded-lg shadow-xl"
        >
          <div class="bg-brand-red text-white p-4 rounded-t-lg flex justify-between items-center">
            <h3 class="font-semibold">Chat with IHARC</h3>
            <button id="chat-close" class="text-white hover:text-gray-200" aria-label="Close chat">
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </button>
          </div>
          <div class="p-4 h-full">
            <p class="text-gray-600">For immediate assistance, please call:</p>
            <p class="text-2xl font-bold text-brand-red mt-2">
              <a href="tel:905-555-HELP" class="hover:underline">(905) 555-HELP</a>
            </p>
            <p class="text-sm text-gray-500 mt-4">
              Or email us at <a href="mailto:info@iharc.ca" class="text-brand-red hover:underline">info@iharc.ca</a>
            </p>
          </div>
        </div>

        <script is:inline>
          document.addEventListener('DOMContentLoaded', function() {
            const toggleButton = document.getElementById('chat-toggle');
            const closeButton = document.getElementById('chat-close');
            const chatWindow = document.getElementById('chat-window');
            
            if (toggleButton && chatWindow) {
              toggleButton.addEventListener('click', function() {
                chatWindow.classList.toggle('hidden');
              });
            }
            
            if (closeButton && chatWindow) {
              closeButton.addEventListener('click', function() {
                chatWindow.classList.add('hidden');
              });
            }
          });
        </script>
      </div>
    )}

    <!-- Chat widget helper functions -->
    <script is:inline define:vars={{ provider }}>
      // Global chat control functions
      window.chatWidget = {
        provider: provider,
        
        // Show/hide chat widget
        show: function() {
          switch(provider) {
            case 'intercom':
              if (window.Intercom) window.Intercom('show');
              break;
            case 'crisp':
              if (window.$crisp) $crisp.push(["do", "chat:show"]);
              break;
            case 'tawk':
              if (window.Tawk_API) Tawk_API.maximize();
              break;
            case 'custom':
              document.getElementById('chat-window')?.classList.remove('hidden');
              break;
          }
        },
        
        hide: function() {
          switch(provider) {
            case 'intercom':
              if (window.Intercom) window.Intercom('hide');
              break;
            case 'crisp':
              if (window.$crisp) $crisp.push(["do", "chat:hide"]);
              break;
            case 'tawk':
              if (window.Tawk_API) Tawk_API.minimize();
              break;
            case 'custom':
              document.getElementById('chat-window')?.classList.add('hidden');
              break;
          }
        },

        // Set user information
        setUser: function(userData) {
          switch(provider) {
            case 'intercom':
              if (window.Intercom) window.Intercom('update', userData);
              break;
            case 'crisp':
              if (window.$crisp) {
                if (userData.email) $crisp.push(["set", "user:email", userData.email]);
                if (userData.name) $crisp.push(["set", "user:nickname", userData.name]);
              }
              break;
            case 'tawk':
              if (window.Tawk_API) {
                Tawk_API.setAttributes({
                  name: userData.name,
                  email: userData.email
                });
              }
              break;
          }
        }
      };

      console.log('Chat widget controls initialized for:', provider);
    </script>
  </Fragment>
)}

{/* Development mode notice */}
{isDev && (
  <script is:inline define:vars={{ provider }}>
    console.log('Chat widget disabled in development mode');
    console.log('Selected provider:', provider);
    console.log('Available chat configurations:', {
      intercom: import.meta.env.PUBLIC_INTERCOM_APP_ID ? '✓ Set' : '✗ Not set',
      zendesk: import.meta.env.PUBLIC_ZENDESK_KEY ? '✓ Set' : '✗ Not set',
      crisp: import.meta.env.PUBLIC_CRISP_WEBSITE_ID ? '✓ Set' : '✗ Not set',
      tawk: (import.meta.env.PUBLIC_TAWK_PROPERTY_ID && import.meta.env.PUBLIC_TAWK_WIDGET_ID) ? '✓ Set' : '✗ Not set'
    });
  </script>
)}

{!hasRequiredConfig() && !isDev && (
  <script is:inline define:vars={{ provider }}>
    console.warn('Chat widget not loaded: Missing required configuration for provider:', provider);
  </script>
)}

<!--
USAGE INSTRUCTIONS:

1. Environment Variables (add to .env file):
   # Choose one provider and set its variables
   
   # Intercom
   PUBLIC_INTERCOM_APP_ID=abc123
   
   # Zendesk
   PUBLIC_ZENDESK_KEY=your_zendesk_key
   
   # Crisp (Free tier available)
   PUBLIC_CRISP_WEBSITE_ID=your_website_id
   
   # Tawk.to (Free)
   PUBLIC_TAWK_PROPERTY_ID=your_property_id
   PUBLIC_TAWK_WIDGET_ID=your_widget_id

2. Add to BaseLayout.astro:
   <ChatWidget provider="crisp" />

3. Custom user data:
   <ChatWidget 
     provider="crisp" 
     config={{
       user: { email: "user@example.com", name: "User Name" },
       session: { page: "contact", source: "header" }
     }}
   />

4. Programmatic control:
   <script>
     // Show chat widget
     window.chatWidget.show();
     
     // Hide chat widget
     window.chatWidget.hide();
     
     // Set user information
     window.chatWidget.setUser({
       name: "John Doe",
       email: "john@example.com"
     });
   </script>

5. Disable chat on specific pages:
   <ChatWidget disabled={true} />

PROVIDER COMPARISON:
- Crisp: Free tier, easy setup, good features
- Tawk.to: Completely free, unlimited chats
- Intercom: Premium features, paid service
- Zendesk: Enterprise features, paid service
- Custom: Full control, requires implementation
-->