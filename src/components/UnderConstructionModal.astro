---
import { contentFlags } from '../data/site';
---

{contentFlags.devNotice && (
  <>
    <!-- Noscript fallback banner -->
    <noscript>
      <div class="bg-yellow-500 text-black py-3 px-4 text-center text-sm font-medium">
        ðŸš§ Site Under Development - This site is under active development. Many features are not yet usable. 
        <a href="/contact" class="underline ml-2">Contact IHARC</a>
      </div>
    </noscript>

    <!-- Modal -->
    <div 
      id="dev-notice-modal" 
      class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden"
      aria-hidden="true"
      role="dialog"
      aria-labelledby="dev-notice-title"
      aria-describedby="dev-notice-description"
    >
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6 relative">
        <!-- Close button -->
        <button
          id="dev-notice-close"
          class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 rounded"
          aria-label="Close notification"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>

        <!-- Content -->
        <div class="pr-8">
          <div class="flex items-center mb-4">
            <div class="flex-shrink-0 w-10 h-10 bg-yellow-100 rounded-full flex items-center justify-center">
              <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.728-.833-2.498 0L5.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
            <h2 id="dev-notice-title" class="ml-3 text-lg font-semibold text-gray-900">
              Site Under Development
            </h2>
          </div>

          <p id="dev-notice-description" class="text-gray-600 mb-6">
            This site is under active development. Many features are not yet usable.
          </p>

          <!-- Action buttons -->
          <div class="flex flex-col sm:flex-row gap-3">
            <button
              id="dev-notice-ok"
              class="flex-1 btn-primary"
            >
              OK
            </button>
            <a
              href="/contact"
              class="flex-1 btn-secondary text-center"
            >
              Contact IHARC
            </a>
          </div>
        </div>
      </div>
    </div>

    <script>
      import { FocusTrap } from '../lib/a11y';

      class UnderConstructionModal {
        private modal: HTMLElement;
        private closeBtn: HTMLElement;
        private okBtn: HTMLElement;
        private focusTrap: FocusTrap | null = null;
        private readonly storageKey = 'iharc_dev_notice_v1';
        private readonly dismissDuration = 24 * 60 * 60 * 1000; // 24 hours

        constructor() {
          this.modal = document.getElementById('dev-notice-modal')!;
          this.closeBtn = document.getElementById('dev-notice-close')!;
          this.okBtn = document.getElementById('dev-notice-ok')!;

          if (this.modal && this.shouldShow()) {
            this.init();
            this.show();
          }
        }

        private shouldShow(): boolean {
          try {
            const lastDismissed = localStorage.getItem(this.storageKey);
            if (!lastDismissed) return true;

            const timeSinceLastDismissed = Date.now() - parseInt(lastDismissed, 10);
            return timeSinceLastDismissed >= this.dismissDuration;
          } catch {
            // localStorage not available or disabled
            return true;
          }
        }

        private init() {
          // Initialize focus trap
          this.focusTrap = new FocusTrap(this.modal, {
            escapeDeactivates: true,
            clickOutsideDeactivates: true,
            returnFocusOnDeactivate: true,
          });

          // Event listeners
          this.closeBtn.addEventListener('click', () => this.dismiss());
          this.okBtn.addEventListener('click', () => this.dismiss());

          // Keyboard events
          this.modal.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
              this.dismiss();
            }
          });

          // Click outside to close
          this.modal.addEventListener('click', (e) => {
            if (e.target === this.modal) {
              this.dismiss();
            }
          });

          // Listen for focus trap deactivation
          document.addEventListener('focus-trap:deactivate', () => {
            this.hide();
          });
        }

        private show() {
          this.modal.classList.remove('hidden');
          this.modal.setAttribute('aria-hidden', 'false');
          document.body.classList.add('overflow-hidden');
          
          // Focus the first focusable element after a brief delay
          setTimeout(() => {
            this.focusTrap?.activate();
          }, 100);
        }

        private hide() {
          this.modal.classList.add('hidden');
          this.modal.setAttribute('aria-hidden', 'true');
          document.body.classList.remove('overflow-hidden');
          this.focusTrap?.deactivate();
        }

        private dismiss() {
          this.hide();
          this.recordDismissal();
        }

        private recordDismissal() {
          try {
            localStorage.setItem(this.storageKey, Date.now().toString());
          } catch {
            // localStorage not available, modal will show again on page reload
          }
        }
      }

      // Initialize modal when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => new UnderConstructionModal());
      } else {
        new UnderConstructionModal();
      }
    </script>
  </>
)}